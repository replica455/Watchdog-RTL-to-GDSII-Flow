Qflow synthesis logfile created on Mon Jun 27 18:31:43 IST 2022
Running yosys for verilog parsing and synthesis
yosys  -s Watchdog.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `Watchdog.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/vlsi/Desktop/Watchdog/source/Watchdog.v' to AST representation.
Generating RTLIL representation for module `\Watchdog'.
Warning: Identifier `\w_reset' is implicitly declared at /home/vlsi/Desktop/Watchdog/source/Watchdog.v:12.
Generating RTLIL representation for module `\up_counter'.
Generating RTLIL representation for module `\T_FF'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \Watchdog
Used module:     \up_counter
Used module:         \T_FF

3.1.2. Analyzing design hierarchy..
Top module:  \Watchdog
Used module:     \up_counter
Used module:         \T_FF
Removed 0 unused modules.
Mapping positional arguments of cell up_counter.tff3 (T_FF).
Mapping positional arguments of cell up_counter.tff2 (T_FF).
Mapping positional arguments of cell up_counter.tff1 (T_FF).
Mapping positional arguments of cell up_counter.tff0 (T_FF).
Mapping positional arguments of cell Watchdog.counter (up_counter).

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\T_FF.$proc$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:51$20'.
     1/1: $0\out[0:0]
Creating decoders for process `\Watchdog.$proc$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:7$16'.
     1/1: $0\t_value[3:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Watchdog.\t_value' from process `\Watchdog.$proc$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:7$16'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\T_FF.\out' using process `\T_FF.$proc$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:51$20'.
  created $dff cell `$procdff$28' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\T_FF.$proc$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:51$20'.
Removing empty process `T_FF.$proc$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:51$20'.
Removing empty process `Watchdog.$proc$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:7$16'.
Cleaned up 2 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \up_counter..
Finding unused cells or wires in module \Watchdog..
  removing unused non-port wire \t_value.
  removing unused non-port wire \w_restart.
  removed 2 unused temporary wires.

3.5. Executing CHECK pass (checking for obvious problems).
checking module T_FF..
checking module Watchdog..
checking module up_counter..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \T_FF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$26 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \Watchdog..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \up_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \T_FF.
  Optimizing cells in module \Watchdog.
  Optimizing cells in module \up_counter.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module T_FF:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Watchdog:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module up_counter:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \T_FF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$26 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \Watchdog..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \up_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \T_FF.
  Optimizing cells in module \Watchdog.
  Optimizing cells in module \up_counter.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \T_FF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$26 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \Watchdog..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \up_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \T_FF.
  Optimizing cells in module \Watchdog.
  Optimizing cells in module \up_counter.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping Watchdog.$not$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:10$1 ($not) with simplemap.
Mapping Watchdog.$not$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:11$2 ($not) with simplemap.
Mapping Watchdog.$or$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:12$3 ($or) with simplemap.
Mapping Watchdog.$and$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:13$4 ($and) with simplemap.
Mapping Watchdog.$xor$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:18$5 ($xor) with simplemap.
Mapping Watchdog.$not$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:18$6 ($not) with simplemap.
Mapping Watchdog.$xor$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:19$7 ($xor) with simplemap.
Mapping Watchdog.$not$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:19$8 ($not) with simplemap.
Mapping Watchdog.$xor$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:20$9 ($xor) with simplemap.
Mapping Watchdog.$not$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:20$10 ($not) with simplemap.
Mapping Watchdog.$xor$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:21$11 ($xor) with simplemap.
Mapping Watchdog.$not$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:21$12 ($not) with simplemap.
Mapping Watchdog.$and$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:23$13 ($and) with simplemap.
Mapping Watchdog.$and$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:23$14 ($and) with simplemap.
Mapping Watchdog.$and$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:23$15 ($and) with simplemap.
Mapping up_counter.$and$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:35$17 ($and) with simplemap.
Mapping up_counter.$and$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:38$18 ($and) with simplemap.
Mapping up_counter.$and$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:41$19 ($and) with simplemap.
Mapping T_FF.$procmux$23 ($mux) with simplemap.
Mapping T_FF.$not$/home/vlsi/Desktop/Watchdog/source/Watchdog.v:56$21 ($not) with simplemap.
Mapping T_FF.$procmux$26 ($mux) with simplemap.
Mapping T_FF.$procdff$28 ($dff) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\T_FF' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 7 wires to a netlist network with 3 inputs and 1 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.2. Extracting gate netlist of module `\Watchdog' to `<abc-temp-dir>/input.blif'..
Extracted 15 gates and 22 wires to a netlist network with 6 inputs and 3 outputs.

3.20.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:       13
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

3.20.3. Extracting gate netlist of module `\up_counter' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.20.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
  removing unused non-port wire \not_enable.
  removing unused non-port wire \not_timeout.
  removing unused non-port wire \w1.
  removing unused non-port wire \w2.
  removing unused non-port wire \w3.
  removing unused non-port wire \w4.
  removed 6 unused temporary wires.
Finding unused cells or wires in module \up_counter..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \Watchdog
Used module:     \up_counter
Used module:         \T_FF

3.22.2. Analyzing design hierarchy..
Top module:  \Watchdog
Used module:     \up_counter
Used module:         \T_FF
Removed 0 unused modules.

3.23. Printing statistics.

=== T_FF ===

   Number of wires:                  6
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_P_                        1
     $_NOR_                          1
     $_XNOR_                         1

=== Watchdog ===

   Number of wires:                 10
   Number of wire bits:             13
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_AND_                          3
     $_AOI3_                         1
     $_NOT_                          1
     $_OR_                           1
     up_counter                      1

=== up_counter ===

   Number of wires:                  7
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_AND_                          3
     T_FF                            4

=== design hierarchy ===

   Watchdog                          1
     up_counter                      1
       T_FF                          4

   Number of wires:                 41
   Number of wire bits:             47
   Number of public wires:          30
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 21
     $_AND_                          6
     $_AOI3_                         1
     $_DFF_P_                        4
     $_NOR_                          4
     $_NOT_                          1
     $_OR_                           1
     $_XNOR_                         4

3.24. Executing CHECK pass (checking for obvious problems).
checking module T_FF..
checking module Watchdog..
checking module up_counter..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\T_FF':
  mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\Watchdog':
Mapping DFF cells in module `\up_counter':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \T_FF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Watchdog..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \up_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \T_FF.
  Optimizing cells in module \Watchdog.
  Optimizing cells in module \up_counter.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\T_FF'.
Finding identical cells in module `\Watchdog'.
Finding identical cells in module `\up_counter'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \T_FF..
Finding unused cells or wires in module \Watchdog..
Finding unused cells or wires in module \up_counter..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\T_FF' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

6.2. Extracting gate netlist of module `\Watchdog' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 3 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

6.3. Extracting gate netlist of module `\up_counter' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

6.3.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           NAND3X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Mapping Watchdog.counter using up_counter.
Mapping Watchdog.counter.tff0 using T_FF.
Mapping Watchdog.counter.tff1 using T_FF.
Mapping Watchdog.counter.tff2 using T_FF.
Mapping Watchdog.counter.tff3 using T_FF.
No more expansions possible.
Deleting now unused module T_FF.
Deleting now unused module up_counter.
Removed 0 unused cells and 56 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port Watchdog.clk: Missing option -inpad.
Don't map input port Watchdog.enable: Missing option -inpad.
Don't map input port Watchdog.restart: Missing option -inpad.
Mapping port Watchdog.timeout using BUFX2.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Watchdog'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Watchdog..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Watchdog.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Watchdog'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Watchdog..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

11. Printing statistics.

=== Watchdog ===

   Number of wires:                 33
   Number of wire bits:             33
   Number of public wires:          33
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     AND2X2                          7
     AOI21X1                         5
     BUFX2                           1
     DFFPOSX1                        4
     INVX1                           3
     NAND2X1                         2
     NAND3X1                         1
     NOR2X1                          2
     OR2X2                           5

End of script. Logfile hash: 5034d907e0
CPU: user 0.11s system 0.00s, MEM: 36.50 MB total, 9.46 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 19% 15x opt_expr (0 sec), 17% 1x share (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl Watchdog_mapped.blif Watchdog /usr/local/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I Watchdog_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif Watchdog.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 6 (load 199.426) from node counter.tff0.out,
driven by DFFPOSX1 with strength 126.421 (fF driven at latency 100)
Top fanout load-to-strength ratio is 1.57748 (latency = 157.748 ps)
Top input node fanout is 4 (load 111.694) from node clk.
Warning 1: load of 171.834 is 1.54592 times greater than strongest gate OR2X2
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 5: load of 209.426 is 1.65658 times greater than strongest gate DFFPOSX1
11 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 17    	Out: 17    	+0
	"2" gates	In: 13    	Out: 13    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/vlsi/Desktop/Watchdog/synthesis
Files:
   Verilog: /home/vlsi/Desktop/Watchdog/synthesis/Watchdog.rtl.v
   Verilog: /home/vlsi/Desktop/Watchdog/synthesis/Watchdog.rtlnopwr.v
   Verilog: /home/vlsi/Desktop/Watchdog/synthesis/Watchdog.rtlbb.v
   Spice:   /home/vlsi/Desktop/Watchdog/synthesis/Watchdog.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f Watchdog.spc Watchdog.xspice

Synthesis script ended on Mon Jun 27 18:31:44 IST 2022
